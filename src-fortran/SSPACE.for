	PROGRAM SUBSPACE
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	COMMON /FILES/ ND1,ND2
	DATA ND1,ND2/1,2/
C
C	READ PARAMETERS
C
	CALL READPARAM (NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM)
C
C	START PROCESS
C
	CALL START (NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM)
	END PROGRAM SUBSPACE
	SUBROUTINE READPARAM (NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO READ VARIABLE PARAMETERS FROM INPUT FILE  				 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	COMMON /FILES/ ND1,ND2
C
C	OPEN OUTPUT AND INPUT FILES
C
	OPEN (UNIT=ND1,FILE='OUTPUT.txt',ACCESS='SEQUENTIAL')
	OPEN (UNIT=ND2,FILE='INPUT.txt',ACCESS='SEQUENTIAL',STATUS='OLD',
	&IOSTAT=L)
	IF (L.NE.0) THEN
	WRITE (ND1,100)
	STOP
	ENDIF
C
C	READ INPUT VARIABLES
C
	READ (ND2,*)
      READ (ND2,*) NN
	READ (ND2,*) NNM
	READ (ND2,*) NWK
	READ (ND2,*) NWM
	READ (ND2,*) NROOT
	READ (ND2,*) RTOL
	READ (ND2,*) NC
	READ (ND2,*) NNC
	READ (ND2,*) NITEM
C
	RETURN
C
  100	FORMAT ('*** ERROR : CANNOT OPEN INPUT FILE! ***')
	END
	SUBROUTINE START (NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO READ MATRICES AND START SOLVER  				 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	INTEGER MAXA(NNM)
	DIMENSION A(NWK),B(NWM),R(NN,NC),TT(NN),W(NN),EIGV(NC)
	DIMENSION D(NC),VEC(NC,NC),AR(NNC),BR(NNC),RTOLV(NC),BUP(NC)
	DIMENSION BLO(NC),BUPC(NC)
	COMMON /FILES/ ND1,ND2
C
C	READ MATRICES A, B AND MAXA
C
	READ (ND2,*)
      DO 10 I=1,NWK
   10	READ (ND2,*) A(I)
	READ (ND2,*)
	DO 20 I=1,NWM
   20	READ (ND2,*) B(I)
	READ (ND2,*)
      DO 30 I=1,NNM
   30	READ (ND2,*) MAXA(I)
	CLOSE (ND2, STATUS='DELETE')
	
C
C	OPEN SCRATCH FILE FOR SOLVER
C
	OPEN (UNIT=3,FORM='UNFORMATTED')
C
C	START SUBSPACE SOLVER
C
	CALL SSPACE (A,B,MAXA,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,BLO,
     &BUPC,NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM,1,0,3,ND1)
C
C	WRITE OUTPUT FILE
C
	CLOSE (ND1, STATUS='DELETE')
	OPEN (UNIT=ND1,FILE='OUTPUT.txt')
      WRITE (ND1,100)
	WRITE (ND1,110)
	WRITE (ND1,*) NROOT
	WRITE (ND1,120)
	WRITE (ND1,*) NN
	WRITE (ND1,130)
      DO 40 I=1,NWK
   40	WRITE (ND1,*) A(I)
	WRITE (ND1,140)
      DO 50 I=1,NWM
   50	WRITE (ND1,*) B(I)
	WRITE (ND1,150)
	DO 60 I=1,NROOT
   60	WRITE (ND1,*) EIGV(I)
	DO 70 I=1,NROOT
	WRITE (ND1,160) I
	DO 70 J=1,NN
   70	WRITE (ND1,*) R(J,I)
	CLOSE (ND1)
C
	RETURN
C
  100	FORMAT ('*** SUCCESSFULL EXIT ***')
  110	FORMAT ('# OF EIGENVALUES FOUND')
  120 FORMAT ('# OF EQUATIONS')
  130 FORMAT ('M A T R I X  -  A')
  140 FORMAT ('M A T R I X  -  B')
  150 FORMAT ('E I G E N V A L U E S')
  160 FORMAT ('E I G E N V E C T O R  -  ',I4)
	END
      SUBROUTINE SSPACE (A,B,MAXA,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,BLO,
     &BUPC,NN,NNM,NWK,NWM,NROOT,RTOL,NC,NNC,NITEM,IFSS,IFPR,NSTIF,IOUT)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO SOLVE FOR THE SMALLEST EIGENVALUES-- ASSUMED .GT. 0 --    .
C .		AND CORRESPONDING EIGENVECTORS IN THE GENERALIZED			 .
C .		EIGENPROBLEM USING THE SUBSPACE ITERATION METHOD			 .
C .																	 .
C .	- - INPUT VARIABLES - -											 .
C .		A(NWK)		= STIFFNESS MATRIX IN COMPACTED FORM (ASSUMED    .
C .					  POSITIVE DEFINITE)                             .
C .		B(NWM)		= MASS MATRIX IN COMPACTED FORM                  .
C .		MAXA(NNM)	= VECTOR CONTAINING ADRESSES OF DIAGONAL         .
C .					  ELEMENTS OF STIFFNESS MATRIX A                 .
C .		R(NN,NC)	= STORAGE FOR EIGENVECTORS                       .
C .		EIGV(NC)	= STORAGE FOR EIGENVALUES						 .
C .		TT(NN)		= WORKING VECTOR								 .
C .		W(NN)		= WORKING VECTOR								 .
C .		AR(NNC)		= WORKING MATRIX STORING PROJECTION OF K		 .
C .		BR(NNC)		= WORKING MATRIX STORING PROJECTION OF K		 .
C .		VEC(NC,NC)	= WORKING MATRIX								 .
C .		D(NC)		= WORKING VECTOR								 .
C .		RTOLV(NC)	= WORKING VECTOR								 .
C .		BUP(NC)		= WORKING VECTOR								 .
C .		BLO(NC)		= WORKING VECTOR								 .
C .		BUPC(NC)	= WORKING VECTOR								 .
C .		NN			= ORDER OF STIFFNESS AND MASS MATRICES			 .
C .		NNM			= NN + 1										 .
C .		NWK			= NUMBER OF ELEMENTS BELOW SKYLINE OF			 .
C .					  STIFFNESS MATRIX								 .
C .		NWM			= NUMBER OF ELEMENTS BELOW SKYLINE OF			 .
C .					  MASS MATRIX									 .
C .						I. E. NWM=NWK FOR CONSISTENT MASS MATRIX	 .
C .							  NWM=NN  FOR LUMPED MASS MATRIX		 .
C .		NROOT		= NUMBER OF REQUIRED EIGENVALUES AND EIGENVECTORS.
C .		RTOL		= CONVERGENCE TOLERANCE ON EIGENVALUES			 .
C .					  ( 1.E-06 OR SMALLER )							 .
C .		NC			= NUMBER OF ITERATION VECTORS USED				 .
C .					  (USUALLY SET TO MIN(2*NROOT, NROOT+8), BUT NC  .
C .					  CANNOT BE LARGER THAN THE NUMBER OF MASS		 .
C .					  DEGREES OF FREEDOM)							 .
C .		NNC			= NC*(NC+1)/2 DIMENSION OF STORAGE VECTORS AR,BR .
C .		NITEM		= MAXIMUM NUMBER OF SUBSPACE ITERATIONS PERMITTED.
C .					  (USUALLY SET TO 16)							 .
C .					  THE PARAMETERS NC AND/OR NITEM MUST BE		 .
C .					  INCREASED IF A SOLUTION HAS NOT CONVERGED		 .
C .		IFSS		= FLAG FOR STURM SEQUENCE CHECK					 .
C .						EQ.0 NO CHECK								 .
C .						EQ.1 CHECK									 .
C .		IFPR		= FLAG FOR PRINTING DURING ITERATION			 .
C .						EQ.0 NO PRINTING							 .
C .						EQ.1 PRINT									 .
C .		NSTIF		= SCRATCH FILE									 .
C .		IOUT		= UNIT USED FOR OUTPUT							 .
C .																	 .
C .	- - OUTPUT - -													 .
C .		EIGV(NROOT)	= EIGENVALUES									 .
C .		R(NN,NROOT) = EIGENVECTORS									 .
C .																	 .
C ......................................................................
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C ......................................................................
C .	THIS PROGRAM IS USED IN SINGLE PRECISION ARITHMETIC ON CRAY		 .
C .	EQUIPMENT AND DOUBLE PECISION ARITHMETIC ON IBM MACHINES,		 .
C .	ENGINEERING WORKSTATIONS AND PCS. DEACTIVATE ABOVE LINE FOR		 .
C .	SINGLE PRECISION ARITHMETIC.									 .
C ......................................................................
	INTEGER MAXA(NNM)
	DIMENSION A(NWK),B(NWM),R(NN,NC),TT(NN),W(NN),EIGV(NC)
	DIMENSION D(NC),VEC(NC,NC),AR(NNC),BR(NNC),RTOLV(NC),BUP(NC)
	DIMENSION BLO(NC),BUPC(NC)
C
C	SET TOLERANCE FOR JACOBI ITERATION
	TOLJ=1.0D-12
C
C	INITIALIZATION
C
	ICONV=0
	NSCH=0
	NSMAX=12
	N1=NC + 1
	NC1=NC - 1
	REWIND NSTIF
	WRITE (NSTIF) A
	DO 2 I=1,NC
    2	D(I)=0.
C
C	ESTABLISH STARTING ITERATION VECTORS
C
	ND=NN/NC
	IF (NWM.GT.NN) GOTO 4
	J=0
	DO 6 I=1,NN
	II=MAXA(I)
	R(I,1)=B(I)
	IF (B(I).GT.0) J=J + 1
    6	W(I)=B(I)/A(II)
	IF (NC.LE.J) GOTO 16
	WRITE (IOUT,1007)
	GOTO 800
    4	DO 10 I=1,NN
	II=MAXA(I)
	R(I,1)=B(II)
   10	W(I)=B(II)/A(II)
   16 DO 20 J=2,NC
	DO 20 I=1,NN
   20 R(I,J)=0.
C
	L=NN - ND
	DO 30 J=2,NC
	RT=0.
	DO 40 I=1,L
	IF (W(I).LT.RT) GOTO 40
	RT=W(I)
	IJ=I
   40 CONTINUE
      DO 50 I=L,NN
	IF (W(I).LE.RT) GOTO 50
	RT=W(I)
	IJ=I
   50 CONTINUE
	TT(J)=FLOAT(IJ)
	W(IJ)=0.
	L=L - ND
   30 R(IJ,J)=1.
C
	WRITE (IOUT,1008)
	WRITE (IOUT,1002) (TT(J),J=2,NC)
C
C	A RANDOM VECTOR IS ADDED TO THE LAST VECTOR
C
	PI=3.141592654D0
	XX=0.5D0
	DO 60 K=1,NN
	XX=(PI + XX)**5
	IX=INT(XX)
	XX=XX - FLOAT(IX)
   60 R(K,NC)=R(K,NC) + XX
C
C	FACTORIZE MATRIX A INTO (L)*(D)*(L(T))
C
	ISH=0
	CALL DECOMP (A,MAXA,NN,ISH,IOUT)
C
C - - - S T A R T   O F   I T E R A T I O N   L O O P
C
	NITE=0
	TOLJ2=1.0D-24
  100 NITE=NITE + 1
	IF (IFPR.EQ.0) GOTO 90
	WRITE (IOUT,1010) NITE
C
C	CALCULATE THE PROJECTIONS OF A AND B
C
   90 IJ=0
	DO 110 J=1,NC
	DO 120 K=1,NN
  120 TT(K)=R(K,J)
      CALL REDBAK (A,TT,MAXA,NN)
	DO 130 I=J,NC
	ART=0.
	DO 140 K=1,NN
  140 ART=ART + R(K,I)*TT(K)
	IJ=IJ + 1
  130 AR(IJ)=ART
	DO 150 K=1,NN
  150 R(K,J)=TT(K)
  110 CONTINUE
	IJ=0
	DO 160 J=1,NC
	CALL MULT (TT,B,R(1,J),MAXA,NN,NWM)
	DO 180 I=J,NC
	BRT=0.
	DO 190 K=1,NN
  190 BRT=BRT + R(K,I)*TT(K)
	IJ=IJ + 1
  180 BR(IJ)=BRT
	IF (ICONV.GT.0) GOTO 160
	DO 200 K=1,NN
  200 R(K,J)=TT(K)
  160 CONTINUE
C
C	SOLVE FOR EIGENSYSTEM OF SUBSPACE OPERATORS
C
	IF (IFPR.EQ.0) GOTO 320
	IND=1
  210 WRITE (IOUT,1020)
	II=1
	DO 300 I=1,NC
	ITEMP=II + NC - I
	WRITE (IOUT,1005) (AR(J),J=II,ITEMP)
  300 II=II + N1 - I
	WRITE (IOUT,1030)
	II=1
	DO 310 I=1,NC
	ITEMP=II + NC - I
	WRITE (IOUT,1005) (BR(J),J=II,ITEMP)
  310 II=II + N1 - I
	IF (IND.EQ.2) GOTO 350
C
  320 CALL JACOBI (AR,BR,VEC,EIGV,W,NC,NNC,TOLJ,NSMAX,IFPR,IOUT)
C
	IF (IFPR.EQ.0) GOTO 350
	WRITE (IOUT,1040)
	IND=2
	GOTO 210
C
C	ARRANGE EIGENVALUES IN ASCENDING ORDER
C
  350 IS=0
	II=1
	DO 360 I=1,NC1
	ITEMP=II + N1 - I
	IF (EIGV(I+1).GE.EIGV(I)) GOTO 360
	IS=IS + 1
	EIGVT=EIGV(I+1)
	EIGV(I+1)=EIGV(I)
	EIGV(I)=EIGVT
	BT=BR(ITEMP)
	BR(ITEMP)=BR(II)
	BR(II)=BT
	DO 370 K=1,NC
	RT=VEC(K,I+1)
	VEC(K,I+1)=VEC(K,I)
  370 VEC(K,I)=RT
  360 II=ITEMP
	IF (IS.GT.0) GOTO 350
	IF (IFPR.EQ.0) GOTO 375
	WRITE (IOUT,1035)
	WRITE (IOUT,1006) (EIGV(I),I=1,NC)
C
C	CALCULATE B TIMES APPROXIMATE EIGENVECTORS (ICONV.EQ.0)
C	   OR	  FINAL EIGENVECTOR APPROXIMATIONS (ICONV.GT.0)
C
  375 DO 420 I=1,NN
	DO 422 J=1,NC
  422 TT(J)=R(I,J)
	DO 424 K=1,NC
	RT=0.
	DO 430 L=1,NC
  430 RT=RT + TT(L)*VEC(L,K)
  424 R(I,K)=RT
  420 CONTINUE
C
C	CALCULATE ERROR BOUNDS AND CHECK FOR CONVERGENCE OF EIGENVALUES
C
	DO 380 I=1,NC
	VDOT=0.
	DO 382 J=1,NC
  382 VDOT=VDOT + VEC(I,J)*VEC(I,J)
	EIGV2=EIGV(I)*EIGV(I)
	DIF=VDOT - EIGV2
	RDIF=MAX(DIF,TOLJ2*EIGV2)/EIGV2
	RDIF=SQRT(RDIF)
	RTOLV(I)=RDIF
  380 CONTINUE
	IF (IFPR.EQ.0 .AND. ICONV.EQ.0) GOTO 385
	WRITE (IOUT,1050)
	WRITE (IOUT,1005) (RTOLV(I),I=1,NC)
  385 IF (ICONV.GT.0) GOTO 500
C
	DO 390 I=1,NROOT
	IF (RTOLV(I).GT.RTOL) GOTO 400
  390 CONTINUE
	WRITE (IOUT,1060) RTOL
	ICONV=1
	GOTO 100
  400 IF (NITE.LT.NITEM) GOTO 100
	WRITE (IOUT,1070)
	ICONV=2
	IFSS=0
	GOTO 100
C
C - - - E N D   O F   I T E R A T I O N   L O O P
C
  500 WRITE (IOUT,1100)
	WRITE (IOUT,1006) (EIGV(I),I=1,NROOT)
	WRITE (IOUT,1110)
	DO 530 J=1,NROOT
  530 WRITE (IOUT,1005) (R(K,J),K=1,NN)
C
C	CALCULATE AND PRINT ERROR MEASURES
C
	REWIND NSTIF
	READ (NSTIF) A
C
	DO 580 L=1,NROOT
	RT=EIGV(L)
	CALL MULT(TT,A,R(1,L),MAXA,NN,NWK)
	VNORM=0.
	DO 590 I=1,NN
  590 VNORM=VNORM + TT(I)*TT(I)
	CALL MULT(W,B,R(1,L),MAXA,NN,NWM)
	WNORM=0.
	DO 600 I=1,NN
	TT(I)=TT(I) - RT*W(I)
  600 WNORM=WNORM + TT(I)*TT(I)
	VNORM=SQRT(VNORM)
	WNORM=SQRT(WNORM)
	D(L)=WNORM/VNORM
  580 CONTINUE
	WRITE (IOUT,1115)
	WRITE (IOUT,1005) (D(I),I=1,NROOT)
C
C	APPLY STURM SEQUENCE CHECK
C
	IF (IFSS.EQ.0) GOTO 900
	CALL SCHECK (EIGV,RTOLV,BUP,BLO,BUPC,D,NC,NEI,RTOL,SHIFT,IOUT)
C
	WRITE (IOUT,1120) SHIFT
C
C	SHIFT MATRIX A
C
	REWIND NSTIF
	READ (NSTIF) A
	IF (NWM.GT.NN) GOTO 645
	DO 640 I=1,NN
	II=MAXA(I)
  640 A(II)=A(II) - B(I)*SHIFT
	GOTO 660
  645 DO 650 I=1,NWK
  650 A(I)=A(I) - B(I)*SHIFT
C
C	FACTORIZE SHIFTED MATRIX
C
  660 ISH=1
	CALL DECOMP (A,MAXA,NN,ISH,IOUT)
C
C	COUNT NUMBER OF NEGATIVE DIAGONAL ELEMENTS
C
	NSCH=0
	DO 664 I=1,NN
	II=MAXA(I)
	IF (A(II).LT.0.) NSCH=NSCH + 1
  664 CONTINUE
	IF (NSCH.EQ.NEI) GOTO 670
	NMIS=NSCH - NEI
	WRITE (IOUT,1130) NMIS
	GOTO 900
  670 WRITE (IOUT,1140) NSCH
	GOTO 900
C
  800	STOP
  900	RETURN
C
 1002	FORMAT (' ',10F10.0)
 1005 FORMAT (' ',12E11.4)
 1006 FORMAT (' ',6E22.14)
 1007 FORMAT (///,' STOP, NC IS LARGER THAN THE NUMBER OF MASS ',
	&		'DEGREES OF FREEDOM')
 1008 FORMAT (///,' DEGREES OF FREEDOM EXCITED BY UNIT STARTING ',
	&		'ITERATION VECTORS')
 1010 FORMAT (//,' I T E R A T I O N   N U M B E R ',I8)
 1020 FORMAT (/,' PROJECTION OF A (MATRIX AR)')
 1030 FORMAT (/,' PROJECTION OF B (MATRIX BR)')
 1035 FORMAT (/,' EIGENVALUES OF AR-LAMBDA*BR')
 1040 FORMAT (//,' AR AND BR AFTER JACOBI DIAGONALIZATION')
 1050 FORMAT (/,' ERROR BOUNDS REACHED ON EIGENVALUES')
 1060 FORMAT (///,' CONVERGENCE REACHED FOR RTOL ',E10.4)
 1070 FORMAT (' *** NO CONVERGENCE IN MAXIMUM NUMBER OF ITERATIONS',
	&		' PERMITTED',/,
	&		' WE ACCEPT CURRENT ITERATION VALUES',/,
	&		' THE STURM SEQUENCE CHECK IS NOT PERFORMED')
 1100 FORMAT (///,' THE CALCULATED EIGENVALUES ARE')
 1115 FORMAT (//,' ERROR MEASURES ON THE EIGENVALUES')
 1110 FORMAT (//,' THE CALCULATED EIGENVECTORS ARE',/)
 1120 FORMAT (///,' CHECK APPLIED AT SHIFT ',E22.14)
 1130 FORMAT (//,' THERE ARE ',I8,' EIGENVALUES MISSING')
 1140 FORMAT (//,' WE FOUND THE LOWEST ',I8,' EIGENVALUES')
C
	END
	SUBROUTINE DECOMP (A,MAXA,NN,ISH,IOUT)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO CALCULATE (L)*(D)*(L)(T) FACTORIZATION OF				 .
C .		STIFFNESS MATRIX											 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION A(1),MAXA(1)
	IF (NN.EQ.1) GOTO 900
C
	DO 200 N=1,NN
	KN=MAXA(N)
	KL=KN + 1
	KU=MAXA(N+1) - 1
	KH=KU - KL
	IF (KH) 304,240,210
  210 K=N - KH
	IC=0
	KLT=KU
	DO 260 J=1,KH
	IC=IC + 1
	KLT=KLT - 1
	KI=MAXA(K)
	ND=MAXA(K+1) - KI - 1
	IF (ND) 260,260,270
  270 KK=MIN0(IC,ND)
	C=0.
	DO 280 L=1,KK
  280 C=C + A(KI+L)*A(KLT+L)
	A(KLT)=A(KLT) - C
  260 K=K + 1
  240 K=N
	B=0.
	DO 300 KK=KL,KU
	K=K - 1
	KI=MAXA(K)
	C=A(KK)/A(KI)
	IF (ABS(C).LT.1.E07) GOTO 290
	WRITE (IOUT,2010) N,C
	GOTO 800
  290 B=B + C*A(KK)
  300 A(KK)=C
	A(KN)=A(KN) - B
  304 IF (A(KN)) 310,310,200
  310 IF (ISH.EQ.0) GOTO 320
	IF (A(KN).EQ.0.) A(KN)=-1.E-16
	GOTO 200
  320 WRITE (IOUT,2000) N,A(KN)
	GOTO 800
  200 CONTINUE
      GOTO 900
C
  800 STOP
  900 RETURN
C
 2000 FORMAT (//' STOP - STIFFNESS MATRIX NOT POSITIVE DEFINITE',//,
     &		  ' NONPOSITIVE PIVOT FOR EQUATION ',I8,//,
	&		  ' PIVOT = ',E20.12)
 2010 FORMAT (//' STOP - STURM SEQUENCE CHECK FAILED BECAUSE OF',
	&		  ' MULTIPLIER GROWTH FOR COLUMN NUMBER ',I8,//,
	&		  ' MULTIPLIER = ',E20.8)
	END
	SUBROUTINE REDBAK (A,V,MAXA,NN)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO REDUCE AND BACK-SUBSTITUTE ITERATION VECTORS				 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION A(1),V(1),MAXA(1)
C
	DO 400 N=1,NN
	KL=MAXA(N) + 1
	KU=MAXA(N+1) - 1
	IF (KU-KL) 400,410,410
  410 K=N
	C=0.
	DO 420 KK=KL,KU
	K=K - 1
  420 C=C + A(KK)*V(K)
	V(N)=V(N) - C
  400 CONTINUE
C
	DO 480 N=1,NN
	K=MAXA(N)
  480 V(N)=V(N)/A(K)
	IF (NN.EQ.1) GOTO 900
	N=NN
	DO 500 L=2,NN
	KL=MAXA(N) + 1
	KU=MAXA(N+1) - 1
	IF (KU-KL) 500,510,510
  510 K=N
	DO 520 KK=KL,KU
	K=K - 1
  520 V(K)=V(K) - A(KK)*V(N)
  500 N=N - 1
C
  900 RETURN
	END
	SUBROUTINE MULT (TT,B,RR,MAXA,NN,NWM)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO EVALUATE PRODUCT OF B TIMES RR AND STORE RESULT IN TT	 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION TT(1),B(1),RR(1),MAXA(1)
C
	IF (NWM.GT.NN) GOTO 20
	DO 10 I=1,NN
   10 TT(I)=B(I)*RR(I)
	GOTO 900
C
   20 DO 40 I=1,NN
   40 TT(I)=0.
	DO 100 I=1,NN
	KL=MAXA(I)
	KU=MAXA(I+1) - 1
	II=I + 1
	CC=RR(I)
	DO 100 KK=KL,KU
	II=II - 1
  100 TT(II)=TT(II) + B(KK)*CC
	IF (NN.EQ.1) GOTO 900
	DO 200 I=2,NN
	KL=MAXA(I) + 1
	KU=MAXA(I+1) - 1
	IF (KU-KL) 200,210,210
  210 II=I
	AA=0.
	DO 220 KK=KL,KU
	II=II - 1
  220 AA=AA + B(KK)*RR(II)
	TT(I)=TT(I) + AA
  200 CONTINUE
C
  900 RETURN
	END
	SUBROUTINE SCHECK (EIGV,RTOLV,BUP,BLO,BUPC,NEIV,NC,NEI,RTOL,
	&				   SHIFT,IOUT)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO EVALUATE SHIFT FOR STURM SEQUENCE CHECK					 .
C .																	 .
C ......................................................................
C
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION EIGV(NC),RTOLV(NC),BUP(NC),BLO(NC),BUPC(NC),NEIV(NC)
C
	FTOL=0.01
C
	DO 100 I=1,NC
	BUP(I)=EIGV(I)*(1.+FTOL)
  100 BLO(I)=EIGV(I)*(1.-FTOL)
	NROOT=0
	DO 120 I=1,NC
  120 IF (RTOLV(I).LT.RTOL) NROOT=NROOT + 1
	IF (NROOT.GE.1) GOTO 200
	WRITE (IOUT,1010)
	GOTO 800
C
C	FIND UPPER BOUNDS ON EIGENVALUE CLUSTERS
C
  200 DO 240 I=1,NROOT
  240 NEIV(I)=1
	IF (NROOT.NE.1) GOTO 260
	BUPC(1)=BUP(1)
	LM=1
	L=1
	I=2
	GOTO 295
  260 L=1
	I=2
  270 IF (BUP(I-1).LE.BLO(I)) GOTO 280
	NEIV(L)=NEIV(L) + 1
	I=I + 1
	IF (I.LE.NROOT) GOTO 270
  280 BUPC(L)=BUP(I-1)
	IF (I.GT.NROOT) GOTO 290
	L=L + 1
	I=I + 1
	IF (I.LE.NROOT) GOTO 270
	BUPC(L)=BUP(I-1)
  290 LM=L
	IF (NROOT.EQ.NC) GOTO 300
  295 IF (BUP(I-1).LE.BLO(I)) GOTO 300
	IF (RTOLV(I).GT.RTOL) GOTO 300
	BUPC(L)=BUP(I)
	NEIV(L)=NEIV(L) + 1
	NROOT=NROOT + 1
	IF (NROOT.EQ.NC) GOTO 300
	I=I + 1
	GOTO 295
C
C	FIND SHIFT
C
  300 WRITE (IOUT,1020)
	WRITE (IOUT,1005) (BUPC(I),I=1,LM)
	WRITE (IOUT,1030)
	WRITE (IOUT,1006) (NEIV(I),I=1,LM)
	LL=LM - 1
	IF (LM.EQ.1) GOTO 310
  330 DO 320 I=1,LL
  320 NEIV(L)=NEIV(L) + NEIV(I)
	L=L - 1
	LL=LL - 1
	IF (L.NE.1) GOTO 330
  310 WRITE (IOUT,1040)
	WRITE (IOUT,1006) (NEIV(I),I=1,LM)
	L=0
	DO 340 I=1,LM
	L=L + 1
	IF (NEIV(I).GE.NROOT) GOTO 350
  340 CONTINUE
  350 SHIFT=BUPC(L)
	NEI=NEIV(L)
	GOTO 900
C
  800 STOP
  900 RETURN
C
 1005 FORMAT (' ',6E22.14)
 1006 FORMAT (' ',6I22)
 1010 FORMAT (' *** ERROR *** SOLUTION STOP IN *SCHECK*',/,
     &		' NO EIGENVALUES FOUND',/)
 1020 FORMAT (///,' UPPER BOUNDS ON EIGENVALUE CLUSTERS')
 1030 FORMAT (//,' NO. OF EIGENVALUES IN EACH CLUSTER')
 1040 FORMAT (' NO. OF EIGENVALUES LESS THAN UPPER BOUNDS')
	END
	SUBROUTINE JACOBI (A,B,X,EIGV,D,N,NWA,RTOL,NSMAX,IFPR,IOUT)
C ......................................................................
C .																	 .
C .	P R O G R A M													 .
C .		TO SOLVE THE GENERALIZED EIGENPROBLEM USING THE				 .
C .		GENERALIZED JACOBI ITERATION								 .
C ......................................................................
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION A(NWA),B(NWA),X(N,N),EIGV(N),D(N)
C
C	INITIALIZE EIGENVALUE AND EIGENVECTOR MATRICES
C
	N1=N + 1
	II=1
	DO 10 I=1,N
	IF (A(II).GT.0. .AND. B(II).GT.0.) GOTO 4
	WRITE (IOUT,2020) II,A(II),B(II)
	GOTO 800
    4 D(I)=A(II)/B(II)
	EIGV(I)=D(I)
   10 II=II + N1 - I
	DO 30 I=1,N
	DO 20 J=1,N
   20 X(I,J)=0.
   30 X(I,I)=1.
	IF (N.EQ.1) GOTO 900
C
C	INITIALIZE SWEEP COUNTER AND BEGIN ITERATION
C
	NSWEEP=0
	NR=N - 1
   40 NSWEEP=NSWEEP + 1
	IF (IFPR.EQ.1) WRITE (IOUT,2000) NSWEEP
C
C	CHECK IF PRESENT OFF-DIAGONAL ELEMENT IS LARGE ENOUGH TO REQUIRE
C	ZEROING
C
	EPS=(.01)**(NSWEEP*2)
	DO 210 J=1,NR
	JP1=J + 1
	JM1=J - 1
	LJK= JM1*N - JM1*J/2
	JJ=LJK + J
	DO 210 K=JP1,N
	KP1=K + 1
	KM1=K - 1
	JK=LJK + K
	KK=KM1*N - KM1*K/2 + K
	EPTOLA=(A(JK)/A(JJ))*(A(JK)/A(KK))
	EPTOLB=(B(JK)/B(JJ))*(B(JK)/B(KK))
	IF (EPTOLA.LT.EPS .AND. EPTOLB.LT.EPS) GOTO 210
C
C	IF ZEROING IS REQUIRED, CALCULATE THE ROTATION MATRIX ELEMENTS CA
C	AND CG
C
	AKK=A(KK)*B(JK) - B(KK)*A(JK)
	AJJ=A(JJ)*B(JK) - B(JJ)*A(JK)
	AB=A(JJ)*B(KK) - A(KK)*B(JJ)
	SCALE=A(KK)*B(KK)
	ABCH=AB/SCALE
	AKKCH=AKK/SCALE
	AJJCH=AJJ/SCALE
	CHECK=(ABCH*ABCH+4.0*AKKCH*AJJCH)/4.0
	IF (CHECK) 50,60,60
   50 WRITE (IOUT,2020) JJ,A(JJ),B(JJ)
	GOTO 800
   60 SQCH=SCALE*SQRT(CHECK)
      D1=AB/2. + SQCH
	D2=AB/2. - SQCH
	DEN=D1
	IF (ABS(D2).GT.ABS(D1)) DEN=D2
	IF (DEN) 80,70,80
   70 CA=0.
	CG=-A(JK)/A(KK)
	GOTO 90
   80 CA=AKK/DEN
	CG=-AJJ/DEN
C
C	PERFORM THE GENERALIZED ROTATION TO ZERO THE PRESENT OFF-DIAGONAL
C	ELEMENT
C
   90 IF (N-2) 100,190,100
  100 IF (JM1-1) 130,110,110
  110 DO 120 I=1,JM1
	IM1=I - 1
	IJ=IM1*N - IM1*I/2 + J
	IK=IM1*N - IM1*I/2 + K
	AJ=A(IJ)
	BJ=B(IJ)
	AK=A(IK)
	BK=B(IK)
	A(IJ)=AJ + CG*AK
	B(IJ)=BJ + CG*BK
	A(IK)=AK + CA*AJ
  120 B(IK)=BK + CA*BJ
  130 IF (KP1-N) 140,140,160
  140 LJI=JM1*N - JM1*J/2
	LKI=KM1*N - KM1*K/2
	DO 150 I=KP1,N
	JI=LJI + I
	KI=LKI + I
	AJ=A(JI)
	BJ=B(JI)
	AK=A(KI)
	BK=B(KI)
	A(JI)=AJ + CG*AK
	B(JI)=BJ + CG*BK
	A(KI)=AK + CA*AJ
  150 B(KI)=BK + CA*BJ
  160 IF (JP1-KM1) 170,170,190
  170 LJI=JM1*N - JM1*J/2
	DO 180 I=JP1,KM1
	JI=LJI + I
	IM1=I - 1
	IK=IM1*N - IM1*I/2 + K
	AJ=A(JI)
	BJ=B(JI)
	AK=A(IK)
	BK=B(IK)
	A(JI)=AJ + CG*AK
	B(JI)=BJ + CG*BK
	A(IK)=AK + CA*AJ
  180	B(IK)=BK + CA*BJ
  190 AK=A(KK)
	BK=B(KK)
	A(KK)=AK + 2.*CA*A(JK) + CA*CA*A(JJ)
	B(KK)=BK + 2.*CA*B(JK) + CA*CA*B(JJ)
	A(JJ)=A(JJ) + 2.*CG*A(JK) + CG*CG*AK
	B(JJ)=B(JJ) + 2.*CG*B(JK) + CG*CG*BK
	A(JK)=0.
	B(JK)=0.
C
C	UPDATE THE EIGENVECTOR MATRIX AFTER EACH ROTATION
C
	DO 200 I=1,N
	XJ=X(I,J)
	XK=X(I,K)
	X(I,J)=XJ + CG*XK
  200 X(I,K)=XK + CA*XJ
  210 CONTINUE
C
C	UPDATE THE EIGENVALUES AFTER EACH SWEEP
C
	II=1
	DO 220 I=1,N
	IF (A(II).GT.0. .AND. B(II).GT.0.) GOTO 215
	WRITE (IOUT,2020) II,A(II),B(II)
	GOTO 800
  215 EIGV(I)=A(II)/B(II)
  220 II=II + N1 - I
	IF (IFPR.EQ.0) GOTO 230
	WRITE (IOUT,2030)
	WRITE (IOUT,2010) (EIGV(I),I=1,N)
C
C	CHECK FOR CONVERGENCE
C
  230 DO 240 I=1,N
	TOL=RTOL*D(I)
	DIF=ABS(EIGV(I)-D(I))
	IF (DIF.GT.TOL) GOTO 280
  240 CONTINUE
C
C	CHECK ALL OFF-DIAGONAL ELEMENTS TO SEE IF ANOTHER SWEEP IS
C	REQUIRED
C
	EPS=RTOL**2
	DO 250 J=1,NR
	JM1=J - 1
	JP1=J + 1
	LJK=JM1*N - JM1*J/2
	JJ=LJK + J
	DO 250 K=JP1,N
	KM1=K - 1
	JK=LJK + K
	KK=KM1*N - KM1*K/2 + K
	EPSA=(A(JK)/A(JJ))*(A(JK)/A(KK))
	EPSB=(B(JK)/B(JJ))*(B(JK)/B(KK))
	IF (EPSA.LT.EPS .AND. EPSB.LT.EPS) GOTO 250
	GOTO 280
  250 CONTINUE
C
C	SCALE EIGENVECTORS
C
  255 II=1
	DO 275 I=1,N
	BB=SQRT(B(II))
	DO 270 K=1,N
  270 X(K,I)=X(K,I)/BB
  275 II=II + N1 - I
	GOTO 900
C
C	UPDATE D MATRIX AND START NEW SWEEP, IF ALLOWED
C
  280 DO 290 I=1,N
  290 D(I)=EIGV(I)
	IF (NSWEEP.LT.NSMAX) GOTO 40
	GOTO 255
C
  800 STOP
  900 RETURN
C
 2000 FORMAT (//,' SWEEP NUMBER IN *JACOBI* = ',I8)
 2010 FORMAT (' ',6E20.12)
 2020 FORMAT (' *** ERROR *** SOLUTION STOP',/,
     &		' MATRICES NOT POSITIVE DEFINITE',/,
     &		' II = ',I8,' A(II) = ',E20.12,' B(II) = ',E20.12)
 2030 FORMAT (/,' CURRENT EIGENVALUES IN *JACOBI* ARE',/)
	END